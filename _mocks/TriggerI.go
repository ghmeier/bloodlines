package mocks

import helpers "github.com/ghmeier/bloodlines/helpers"
import mock "github.com/stretchr/testify/mock"
import models "github.com/ghmeier/bloodlines/models"
import uuid "github.com/pborman/uuid"

// TriggerI is an autogenerated mock type for the TriggerI type
type TriggerI struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *TriggerI) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *TriggerI) GetAll(_a0 int, _a1 int) ([]*models.Trigger, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.Trigger
	if rf, ok := ret.Get(0).(func(int, int) []*models.Trigger); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByKey provides a mock function with given fields: _a0
func (_m *TriggerI) GetByKey(_a0 string) (*models.Trigger, error) {
	ret := _m.Called(_a0)

	var r0 *models.Trigger
	if rf, ok := ret.Get(0).(func(string) *models.Trigger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *TriggerI) Insert(_a0 *models.Trigger) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Trigger) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *TriggerI) Update(_a0 string, _a1 uuid.UUID, _a2 []string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, []string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ helpers.TriggerI = (*TriggerI)(nil)
