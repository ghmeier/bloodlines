package mocks

import mock "github.com/stretchr/testify/mock"
import sql "github.com/ghmeier/bloodlines/gateways/sql"

// Search is an autogenerated mock type for the Search type
type Search struct {
	mock.Mock
}

// Limit provides a mock function with given fields: _a0
func (_m *Search) Limit(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Order provides a mock function with given fields: _a0, _a1
func (_m *Search) Order(_a0 string, _a1 ...*sql.SortTerm) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...*sql.SortTerm) string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToQuery provides a mock function with given fields:
func (_m *Search) ToQuery() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Where provides a mock function with given fields: _a0, _a1
func (_m *Search) Where(_a0 string, _a1 ...*sql.SortTerm) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...*sql.SortTerm) string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

var _ sql.Search = (*Search)(nil)
